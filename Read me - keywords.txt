*************************
* INIT - 초기화 함수  *
*************************
void start(void);
- start();
- 메이크에듀보드 초기화 함수(디지털핀을 출력, 아날로그핀 입력으로 설정, 멜로디연주속도를 4로 지정함)
- 초기화함수의 순위는 1순위로 아두이노의 setup함수내에 가장먼저 호출되어야 한다.

void start_servo(char num);
- start_servo(사용할 서보모터 개수);		
- 사용할 servo모터의 개수 초기화(초기값은 0)
- 사용할 서보모터의 개수에 맞춰 D10핀부터 D13번핀까지 차례대로 서보모터를 사용할 수 있다.
  때문에 초기화 함수로 사용할 수 있는 서보모터는 총 4개이다.(더 사용하고 싶으면 아두이노의
  제공 라이브러리 사용법을 따르면 됨)
- 초기화함수의 순위는 2순위로 start()함수 다음에 호출되어야 한다.

void start_ultraSonic(char use, unsigned char trig, unsigned char echo);	
- start_ultraSonic(ON/OFF, trig핀번호, echo핀번호);
- 초음파센서를 사용하지 않을 때는 반드시 OFF해야 한다.
- 초기화함수의 순서는 3순위로 start_servo()함수 다음에 호출되어야 한다.
- 설정을 마치면 센서값은 getDistance();를 호출하여 사용한다.

void start_led(uint16_t count, int _pin);
- start_led(사용할 led픽셀 개수, 스트립연결핀);		
- 사용할 led의 개수 초기값은 4, 스트립연결핀 초기값 D13번핀에 지정되어 있다.
- 사용할 led의 픽셀 개수와 스트립연결포트번호에 맞춰 세팅해야 한다.
- led 절대밝기값을 50으로 세팅, ledSpeed도 LOW로 세팅한다.
- 초기화함수의 순위는 2순위로 start()함수 다음에 호출되어야 한다.

*****************************
* SETTING - 설정 함수   *
*****************************
void finish(void);
- finish();
- 아두이노 loop함수 안에서 프로그램 코드를 순차적으로 1번 실행후 모든 디지털 핀 포트를 출력으로 설정하고
  출력값을 low값으로 셋팅 후 코드진행을 멈춤
- loop함수 내 언더라인 밑에 삽입되어 있음. 꼭 필요한 경우가 아니라면 지우지 말 것.

void tempo(float spd);
- tempo(멜로디연주속도);
- note 연주 속도를 정하는 함수 (기본값 4)
- tempo값이 1일 때 note 함수는 tone함수를 그대로 호출함
- tempo값이 1이고 note 함수의 음계가 0이면 noTone함수를 호출함
- start()함수에서 기본값으로 호출되어지므로 loop함수내에서 melody의 연주속도를 바꾸고 싶다면
  연주중간에 호출하여 자유롭게 연주속도를 변경할 수 있다.
- 사용가능한 수의 범위가 실수범위이므로 소수점 첫째자리까지 입력해서 연주속도를 자유롭게 조정할 수 있음
- 연주속도를 0으로 설정하면 melody함수를 buzzer함수처럼 사용할 수 있다.(단 쉬는시간 설정이 되지 않는다)

void ledSpeed(unsigned char flag);
- ledSpeed(HIGH / LOW);
- led스트립의 고속제어를 위한 설정함수. 최초 led_start함수에서 LOW로 설정되어 있다. 이경우 led함수는 show함수를 동시에 호출하므로 
스트립의 led픽셀을 개별적으로 제어하기 용이하지만 스트립제어를 위해 픽셀마다 데이터를 실행하므로 속도가 느리다. 
(제어할 픽셀의 수가 많아질수록 느려지며 255개 기준으로 대략 1/10초정도가 제어속도의 한계이다)
ledSpeed를 HIGH로 바꾸면 데이터를 모두 고속으로 전송한 후 한번만 실행하므로 제어속도가 비약적으로 상승한다.(대략 1/100초)
대신 고속제어를 위해서는 led함수를 호출한 후 스트립실행함수인 ledShow()를 호출해야 정상적으로 작동한다.
- 스트립 효과를 위한 실행함수에는 영향을 미치치 않는다.(ledWipe, ledTheaterChase...등등)

void ledBight(unsigned char bright);  
- ledBright(밝기의 pwm값);
- led 픽셀에 표현된 색상의 밝기를 조절하는 설정함수. 최초 led_start함수에서 50으로 설정되어 있다.
- 광원의 3원색이 혼합된 색상의 경우 해당 색상의 밝기를 256단계로 조절할 수 있다.
- 기본 광원의 3원색은 led함수에서 바로 밝기를 제어할 수 있으나 광원이 섞이면 led함수에서 제공하는 RGB값으로
밝기를 조절하는 것이 어렵다.(해보면 안다)
- exam05_ledBrightControl 예제를 참조 할 것

**********************************
* SOUND - 소리관련 함수     *
**********************************
void buzzer(int onTime, int offTime);
- buzzer(울림시간, 쉬는시간);
- 피에조 부저를 이용해 단순 부저처럼 사용하는 함수
- onTime에 지정된 시간만큼 소리나고 offTime에 지정된 시간만큼 소리내기를 쉰다.
- onTime/offTime의 비율을 이용해 다양한 부저효과를 줄 수 있다.
- exam02_buzzer 예제를 참조 할 것.

void note(int pitch, float beat);
- note(음계, 박자표);
- 피에조부저를 이용해 음계를 연주하는 함수
- 하나의 note는 하나의 음표에 대응한다.
- note에는 B0부터 가능하나 사용하는 피에조부저가 물리적으로 낮은 울림의 내지 못하므로
  실제 출력가능한 음계는 3옥타브 도부터 8옥타브 레#까지다.
- 쉼표는 note값이 없으므로 0을 쓰거나 rest라고 표기한다.
- note함수에서 tempo값이 1이면 아두이노기본 함수인 tone()함수에 바로 호출한다.
- note함수에서 tempo값이 1이고 음계값이 0이면  아두이노기본 함수인 noTone()함수에 바로 호출한다.
- note함수에서 tempo값이 0이면 note함수를 버저처럼 사용한다. buzzer()함수는 비프음이 440Hz로 
고정되어 있지만 note()함수를 사용해서 비프음을 다양하게 낼 수 있다. 
- exam03_note 예제를 참조 할 것

*******************************
* led 관련함수 *
*******************************
void led(uint16_t n, int r, int g, int b);
- led(사용할 픽셀번호, Red의 pwm값, Green의 pwm값, Blue의 pwm값);
- 사용할 led의 번호는 신호 핀에 가까운 순서로 0~n차순이다.
- RGB에 각각 0~255까지 밝기값을 주어 다양한 색상을 표현할 수 있다.
- 이론적으로 다수의 led를 한 줄에 엮어서 개별 제어 할 수있으나 전력 문제로 보통은 8개까지 제어한다. 
스트립에 개별적인 전원을 연결하면 상당한 량의 픽셀수를 제어할 수 있다.
- exam04_led 예제를 참조 할 것

void ledShow(void);
- ledShow();
- 함수인자 없이 실행하는 함수로 ledSpeed가 HIGH일때 led함수를 실행해 주는 함수
- 스트립 효과를 위한 실행함수에는 영향을 미치치 않는다.(ledWipe, ledTheaterChase...등등)

void ledWipe(int r, int g, int b, unsigned int t);
- ledWipe(Red의 pwm값, Green의 pwm값, Blue의 pwm값, wipe시간);
- 지정된 RGB값의 색상을 wipe시간만큼 지연시켜가며 순서대로 켠다.
- wipe시간을 0으로 하면 전체 픽셀이 동시에 켜진다
- wipe시간의 최대값은 65000이다.

void ledTheaterChase(int r, int g, int b,unsigned int t);
- ledTheaterChase(Red의 pwm값, Green의 pwm값, Blue의 pwm값, wipe시간);
- 지정된 RGB값의 색상을 wipe시간만큼 지연시켜 2개의 픽셀을 건너뛰며 연속으로 켜진다.
(1,4,7,10.....)->(2,5,8,11.....)->(3,6,9,12....)를 반복한다.
- t시간의 최대값은 65000이다.
- 지연시간 t는 0이 되면 안된다

void ledRainbow(unsigned int t);
- ledRainbow(색상변환지연시간 t);
- 색상변화지연시간 t만큼 대기 후 무지개색상순으로 변화한다.
- 색상 변환 단계는 256단계이다.
- t시간의 최대값은 250이다.

void ledRainbowCycle(unsigned int t);
- ledRainbowCycle(색상변환지연시간 t);
- 전체 led픽셀이 각각 무지개색으로 회전한다. 
- 색상 변환 단계는 256단계이다.
- t시간의 최대값은 250이다.

void ledRainbowTheaterChase(unsigned int t);
- ledTheaterChaseRainbow(색상변환지연시간 t);
- 전체 led픽셀이 각각 무지개색으로 변하면서 Theater Chaseing 한다. 
- 색상 변환 단계는 256단계이다.
- t시간의 최대값은 250이다.

*****************************
* MOTOR - 모터출력관련 함수 *
*****************************
void wheel(int lspd, int rspd);                    
- wheel(왼쪽모터속도, 오른쪽모터속도);
- 속도값은 -200부터 200까지이고 0은 모터정지를 뜻함.(음수는 역방향, 양수는 정방향)
- 시간값이 지정되지 않으므로 각 모터의 속도와 방향만 정함. 
- 무한반복을 하거나 delay()함수를 이용해 지연시간을 설정해야만 동작함
- exam06_wheel 예제를 참조할 것

void motor(int lspd, int rspd, unsigned int timer); 
- motor(왼쪽모터속도, 오른쪽모터속도,동작시간);
- 속도값은 -200부터 200까지이고 0은 모터정지를 뜻함.(음수는 역방향, 양수는 정방향)
- 시간값을 정하면 지정된 시간만큼 모터를 동작하고 시간값을 0으로 두면 wheel과 같음
- motor함수에 지정된 시간이 지나면 모터가 동작을 멈춘다는 개념을 가지고 있으므로
  실제로 지정시간이 끝나면 모터를 정지시키는 코드를 함수 내에 포함함. 
  단 시간값이 0이라면 wheel함수를 호출하므로 모터를 정지하는 코드가 실행되지 않음.
- exam07_motor 예제를 참조 할 것

void servo(char num, int state);                   
- servo(서보모터핀번호, 각도값); 
- 각도값은 0~180까지 입력가능, 각도값대신 ON/OFF인자를 통해 토크사용 유무를 결정함.
- exam08_servo_degree_write, exam09_servo_torqueTest 예제를 참조 할것

************************
* data - IO관련 함수  *
************************
float getDistance(void);
- getDistance();
- HC-SR04 초음파센서를 이용해 거리값을 Cm단위로 반환해주는 함수
- 비교문과 같이 실제 구문에 사용할 때는 메크로 상수로 정의된 이름인 "distance"를 사용함.
- exam17_ultraSonar 예제를 참조 할 것

bool boolanalogRead(char Pin, unsigned int value);
- boolanalogRead(아날로그핀번호, 기준값);
- 아날로그핀에 입력되는 값을 기준값과 비교해 입력값이 크면 참, 작으면 거짓의 진리값을 반환한다.
- 아날로그핀에 디지털 입력센서를 사용할 경우 유용하게 사용할 수 있다. 
- 또한 아날로그 입력센서의 경우 기준값을 자유롭게 설정하여 디지털 방식으로 작동시킬 수 있다.
- 진리값을 반환하므로 조건문에서 비교식 없이 바로 사용할 수 있다.
- exam13_booanalogRead 예제를 참조할 것